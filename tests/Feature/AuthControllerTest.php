<?php

namespace Tests\Feature;

use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;

class AuthControllerTest extends TestCase
{
	protected function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub
	}

	/**
	 * @param array $data
	 * @param array $resultStructure
	 * @param int $statusCode
	 * @dataProvider registerDataProvider
	 * @return void
	 * @covers       \App\Http\Controllers\AuthController::register
	 */
	public function testRegister(array $data, array $resultStructure, int $statusCode): void
	{
		$response = $this->post('/api/user/register', $data);
		$response->assertStatus($statusCode);
		$response->assertJsonStructure($resultStructure);
	}

	public static function registerDataProvider(): array
	{
		return [
			[
				'data'             => [
					'name'                  => 'Тест',
					'email'                 => 'test@test.com',
					'password'              => 'password',
					'password_confirmation' => 'password',
				],
				'result_structure' => [
					'success',
					'data' => [
						'id',
						'name',
						'email',
						'created_at',
						'updated_at',
					],
					'message',
				],
				'status_code'      => Response::HTTP_CREATED
			],
			[
				'data'             => [],
				'result_structure' => [
					'message',
					'errors' => [
						'name',
						'email',
						'password'
					],
				],
				'status_code'      => Response::HTTP_UNPROCESSABLE_ENTITY
			]
		];
	}

	/**
	 * @param array $data
	 * @param array $resultStructure
	 * @param int $statusCode
	 * @dataProvider loginDataProvider
	 * @return void
	 * @covers \App\Http\Controllers\AuthController::login
	 */
	public function testLogin(array $data, array $resultStructure, int $statusCode): void
	{
		if ($statusCode == Response::HTTP_OK) {
			$data['email'] = $this->user->email;
		}

		$response = $this->post('api/user/login', $data);
		$response->assertStatus($statusCode);
		$response->assertJsonStructure($resultStructure);
	}

	public static function loginDataProvider(): array
	{
		return [
			[
				'data'             => [
					'password' => 'password'
				],
				'result_structure' => [
					'success',
					'data' => [
						'token_type',
						'expires_in',
						'access_token',
						'refresh_token',
					],
					'message',
				],
				'status_code'      => Response::HTTP_OK
			],
			[
				'data'             => [
					'email'    => 'testTetsTestTest@test.com',
					'password' => 'password'
				],
				'result_structure' => [
					'success',
					'data',
					'message',
				],
				'status_code'      => Response::HTTP_NOT_FOUND
			]
		];
	}

	/**
	 * @param array $data
	 * @param array $resultStructure
	 * @param int $statusCode
	 * @dataProvider logoutDataProvider
	 * @return void
	 * @covers       \App\Http\Controllers\AuthController::logout
	 */
	public function testLogout(array $data, array $resultStructure, int $statusCode): void
	{
		$bearer = null;

		if ($statusCode == Response::HTTP_OK) {
			$login  = $this->getLogin();
			$bearer = $login['access_token'];
		}

		$response = $this->post('/api/user/logout', [], [
			'Authorization' => sprintf('Bearer %s', $bearer),
		]);
		$response->assertStatus($statusCode);
		$response->assertJsonStructure($resultStructure);
	}

	public static function logoutDataProvider(): array
	{
		return [
			[
				'data'             => [],
				'result_structure' => [
					'success',
					'data',
					'message',
				],
				'status_code'      => Response::HTTP_OK
			],
			[
				'data'             => [],
				'result_structure' => [
					'success',
					'data',
					'message',
				],
				'status_code'      => Response::HTTP_UNAUTHORIZED
			],
		];
	}

	/**
	 * @param array $data
	 * @param array $resultStructure
	 * @param int $statusCode
	 * @dataProvider refreshDataProvider
	 * @return void
	 * @covers       \App\Http\Controllers\AuthController::refresh
	 */
	public function testRefresh(array $data, array $resultStructure, int $statusCode): void
	{
		if ($statusCode == Response::HTTP_OK) {
			$data['refresh_token'] = $this->getLogin()['refresh_token'];
		}

		$response = $this->post('/api/user/refresh-token', $data);
		$response->assertStatus($statusCode);
		$response->assertJsonStructure($resultStructure);
	}

	public static function refreshDataProvider(): array
	{
		return [
			[
				'data'             => [
					'refresh_token'
				],
				'result_structure' => [
					'success',
					'data' => [
						'token_type',
						'expires_in',
						'access_token',
						'refresh_token',
					],
					'message',
				],
				'status_code'      => Response::HTTP_OK
			],
			[
				'data'             => [
					'refresh_token' => 'falseToken'
				],
				'result_structure' => [
					'success',
					'data',
					'message',
				],
				'status_code'      => Response::HTTP_UNAUTHORIZED
			],
		];
	}
}
